/* @flow */
// Auto-Generated by build-lua script in utils folder
// These are pre-compiled lua script descriptors which can be loaded
// into
import type Redis from 'ioredis';
import type { File$SimpleData } from 'ioredis-utils/lib/types';
import { lua } from 'ioredis-utils';

const descriptors: Array<File$SimpleData> = [
  {
    descriptor: {
      file: 'hsetifeq.lua',
      name: 'hsetifeq',
      ext: '.lua',
    },
    data: 'local HashKey = KEYS[1]\ntable.remove(KEYS, 1)\n\nif #KEYS % 2 ~= 0 or #ARGV %2 ~= 0 then\n  return redis.error_reply(\"Keys and args Must be a set of key/value pairs\")\nend\n\nlocal CheckKeys = {}\nlocal CheckTable = {}\n\nfor i=1,#KEYS/2 do\n  local k = KEYS[i * 2 - 1]\n  local v = KEYS[i * 2]\n  table.insert(CheckKeys, k)\n  CheckTable[k] = v\nend\n\nlocal HashArray = redis.call(\"HMGET\", HashKey, unpack(CheckKeys))\n\nfor i=1,#HashArray/2 do\n  local k = HashArray[i * 2 - 1]\n  local v = HashArray[i * 2]\n  if CheckTable[k] ~= v then\n    return nil\n  end\nend\n\nreturn redis.call(\"HMSET\", HashKey, unpack(ARGV))',
    params: {"name":"hsetifeq","dynamic":false,"keys":[]},
  },
  {
    descriptor: {
      file: 'hsetifget.lua',
      name: 'hsetifget',
      ext: '.lua',
    },
    data: 'local HashKey = KEYS[1]\ntable.remove(KEYS, 1)\n\nif #KEYS % 2 ~= 0 or #ARGV %2 ~= 0 then\n  return redis.error_reply(\"Keys and args Must be a set of key/value pairs\")\nend\n\nlocal CheckKeys = {}\nlocal CheckTable = {}\n\nfor i=1,#KEYS/2 do\n  local k = KEYS[i * 2 - 1]\n  local v = KEYS[i * 2]\n  table.insert(CheckKeys, k)\n  CheckTable[k] = v\nend\n\nlocal HashArray = redis.call(\"HMGET\", HashKey, unpack(CheckKeys))\n\nfor i=1,#HashArray/2 do\n  local k = HashArray[i * 2 - 1]\n  local v = HashArray[i * 2]\n  if CheckTable[k] ~= v then\n    return nil\n  end\nend\n\n\nlocal result = redis.call(\"HMSET\", HashKey, unpack(ARGV))\n\nif result[\"ok\"] then\n  return redis.call(\"HGETALL\", HashKey)\nend\n\nreturn nil',
    params: {"name":"hsetifget","dynamic":true,"keys":["key","ifMatchesThis","thenSetThese"]},
  },
];

function addDefaultScriptsToRedis(redis: Redis) {
  return lua.addScriptsToRedis(redis, descriptors);
}

export default addDefaultScriptsToRedis;
